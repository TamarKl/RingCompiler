
PARSER_BEGIN(SimpleLang)

public class SimpleLang {
    public static int counterBreaks=0;
    public static String code = "";
    public static String javaCodeStart = "";
    public static java.util.HashSet<String> symtable = new java.util.HashSet<String>();
    public static void main(String[] args) {
        SimpleLang p = null;
        java.io.FileWriter out = null;
        java.io.File javaTarget = null;
        
        System.out.println("Reading from file " + args[0]);
        try {
            p = new SimpleLang(new java.io.FileInputStream(args[0]));
            javaTarget = new java.io.File(args[1]);
            out = new java.io.FileWriter(javaTarget);
            javaCodeStart = "import java.util.Scanner;\npublic class " + javaTarget.getName() + "{" +
                "\npublic static void main(String[] args){\nScanner console = new Scanner(System.in);\n";
        }
        catch(java.io.FileNotFoundException e) {
            System.out.println("Error in reading file");
        }
        catch(java.io.IOException e) {
            System.out.println("Error in Writing");
        }
        
        
        try {
            p.Program();
            code = javaCodeStart + code + "\n" + "}" + "\n" + "}";
            
            out.write(code);
            out.close();
            System.out.println("Parsing was done successfully");
        }
        catch(ParseException e) {
            System.out.println("Error in parsing");
            System.out.println(e.getMessage());
        }
        catch(TokenMgrError e) {
            System.out.println("There was an error in analyzing the code");
            System.out.println(e.getMessage());
        }
        catch(java.io.IOException e) {
            System.out.println("Error in Writing");
        }
    }

}

PARSER_END(SimpleLang)

SKIP: {
    " "
|   "\t"
|   "\n"
|   "\r"
|   <"//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
|   <"/*" (~[])+ "*/">
}

// Reserved words and operators
TOKEN: {
    <ENDBLOCK: "<-->">
|   <EQUAL: "=">
|   <COMMA: ",">
|   <COLON: ":">
|   <MULT: "*">
|   <PLUS: "+">
|   <MINUS: "-">
|   <DIV: "/">
|   <LB: "(">
|   <RB: ")">
|   <NOTEQUAL: "!=">
|   <SMALL: "<">
|   <BIG: ">">
|   <PRINT: ("s"|"S")("E"|"e")("e"|"E")>
|	<GIVE:  ("G"|"g")("I"|"i")("V"|"v")("E"|"e")>
|   <WHILE: ("w"|"W")("H"|"h")("I"|"i")("L"|"l")("E"|"e")>
|	<AND: ("a"|"A")("n"|"N")("d"|"D")>
|   <OR:   ("O"|"o")("R"|"r")>
|   <END: ("e"|"E")("N"|"n")("D"|"d")>
|   <IF: ("I"|"i")("f"|"F")>
|   <BUT: ("B"|"b")("u"|"U")("T"|"t")>
|	<OK: ("O"|"o")("k"|"K")>
|   <ELSE: ("E"|"e")("L"|"l")("S"|"s")("E"|"e")>
|	<NEW_LINE: "nl">
|   <EXIT: ("E"|"e")("X"|"x")("I"|"i")("T"|"t")>

}   

// Identifiers etc.
TOKEN: {
    <#LETTER: ["a"-"z", "A"-"Z"]>
|   <#DIGIT: ["0"-"9"]>
|   <IDENTIFIER: <LETTER>(<LETTER>| "_"| <DIGIT>)*>
|   <#INT: (<DIGIT>)+>
|   <#REAL: (<DIGIT>)+"."(<DIGIT>)+>
|   <NUMBER: (<INT> | <REAL>)>
|   <STRING: "\""(~["\n", "\r"])* "\"">

}



void Program() : {String s1, s2;}
{
    s2 = Statements()
    <EOF>
    {   String vars = "";
        for(java.util.Iterator<String> it = symtable.iterator(); it.hasNext();) 
            vars += "\ndouble " + it.next() + ";";
        code = vars + s2;
    }
}

String Statement() : {String res; int counter=0;counterBreaks=0;}
{ 
 res = Print()
    {return res; }
 |   res = Assign()
    {return res+"\n"; }
| res=Get(){return res;}
| res=While(++counter){return res;}
| res=If(){return res;}
	
}

String Statements() : {String s1, s2;}
{
    s1 = Statement()
    s2 = Statements()
    {return s1 + s2; }
|   {}  {return "";}
}

String Assign() : {Token t;
                 String exp; }
{
    t = <IDENTIFIER>    
    <EQUAL>
    exp = E()       {
                            if(!symtable.contains(t.image.toLowerCase()))
                                symtable.add(t.image.toLowerCase());
                            return "\n" + t.image.toLowerCase() + " = " + 
                                                exp + ";"; 
                    }
}

String E() : {String t1, t2;}
{
    t1 = Term()
    t2 = EPrime()
    {return t1 + t2; }
}

String EPrime() : {String t1, t2;}
{
    <PLUS>
    t1 = Term()
    t2 = EPrime()   {return " + " + t1 + t2; }
|   <MINUS>
    t1 = Term()
    t2 = EPrime()   {return " - " + t1 + t2; }
|   {}              {return ""; }
}

String Term() : {String t1, t2;}
{
    t1 = Factor()
    t2 = TermPrime()
    { return t1 + t2; }
}

String TermPrime() : {String t1, t2;}
{
    <MULT>
    t1 = Factor()
    t2 = TermPrime()    {return " * " + t1 + t2; }
|   <DIV>
    t1 = Factor()
    t2 = TermPrime()    {return " / " + t1 + t2; }
|   {}                  {return ""; }
}

String Factor() : {String res;
                    Token t;}
{
    <LB>
    res = E()
    <RB>                { return "(" + res + ")"; }
|   t = <NUMBER>        { return t.image; }
|   t = <IDENTIFIER>    { if(!symtable.contains(t.image.toLowerCase()))
                                throw new ParseException(t.image.toLowerCase() + " undefined");
                            return t.image.toLowerCase(); }
}

String Print() : { String res = "", args = "";} 
{
    <PRINT>     { res = "\nSystem.out.println(";}
    args = ArgsToPrint()    { res = res + args + ");";}
    {return res;}
}
String ArgsToPrint() : {String t1,t2; 
						String exp="";
					   }
{
	t1=Args() {exp+=t1;}
	t2=ArgsConToPrint(){exp+=t2;}
	{return exp;}
}

String ArgsConToPrint() : {String res="",s,s2;}
{
	<PLUS>
	s=Args() {res+="+"+s; }
	s2=ArgsConToPrint(){    if(s2!="")
								res+=s2;
							return res;}
|
	{}{return res;}
}


String Args() : { Token t;} 
{
    t = <STRING>    { 	return t.image.toLowerCase(); }
|   t = <IDENTIFIER>    { if(!symtable.contains(t.image.toLowerCase()))
                            throw new ParseException(t.image.toLowerCase() + " undefined");
                          return t.image.toLowerCase(); 
                        }
|   t = <NEW_LINE>  { return "\"\\n\"";}
}

String Get() : {Token t;}
{
<GIVE> 
t=<IDENTIFIER> 
{ if(!symtable.contains(t.image.toLowerCase()))
                                symtable.add(t.image.toLowerCase());
              String res ="\n"+t.image.toLowerCase()+"=console.nextInt();\n";
			 return res;
			 }
}

String While(int counter) : {String t1,t2,res;}
{
<WHILE>
t1=Expression()
t2=expConWhile(counter)
<END>{      
            if (counterBreaks>0){
                counterBreaks--;
                res="while ("+t1+") {\n"+t2+"\n}\nbreak;\n";
                return res;
            }
            res="while ("+t1+") {\n"+t2+"\n}\n";
			 return res;
			}			

}
String expConWhile (int counter) : {String t2;}
{
t2=StatementsWhile(counter){return t2;}


}

String expIfConWhile(int counter):{String t1,t2,t3,res=" ";}
 {
 <BUT>
  t1=Expression()
  t2=expConWhile(counter){res+="\nelse if("+t1+") {"+t2+"\n}\n";}
  t3=expIfConWhile(counter){res+=t3;return res;}
  |
  <ELSE>
  t2=expConWhile(counter){res+="else {\n"+t2+"\n}";}
  t3=expIfConWhile(counter){res+=t3;return res;}
  |
  {}{return res;}
 }
 
 
String StatementsWhile(int counter) : {String s1, s2;}
{
    s1 = StatementWhile(counter)
    s2 = StatementsWhile(counter)
    {return s1 + s2; }
|   {}  {return "";}
}
String StatementWhile(int counter) : {String res;String i;}
{ 
 res = Print()
    {return res; }
 |   res = Assign()
    {return res+"\n"; }
| res=Get(){return res;}
| res=While(++counter){return res;}
| res=IfInWhile(counter){return res;}
| <EXIT> i=ExitCommand(counter){   return i;}
	
}
String ExitCommand (int counter) : {Token t,t1;} 
{
t=<MINUS><NUMBER>
    {  
                throw new ParseException("exit command exception");
    }
|t=<NUMBER>{    System.out.println("counter= "+Integer.toString(counter)+" gotten: "+t.image);
                if(Integer.parseInt(t.image)>counter)
                    throw new ParseException("exit command exception");
                counterBreaks=Integer.parseInt(t.image)-1;
                if(Integer.parseInt(t.image)!=0)
                    return "\nbreak;";
                return "";

}
| {} {return "\nbreak;";}
}
String IfInWhile (int counter) : {String t1,t2,t3,res;}
{
<IF>
t1=Expression()
t2=expConWhile(counter)
t3=expIfConWhile(counter)
<OK>{res="if("+t1+") {"+t2+"\n}\n"+t3;
			 return res;
	}
}
String expCon () : {String t2;}
{
t2=Statements(){return t2;}

}

String Expression() : {String t1,t2 ; String res;}
{
t1=EQ()
res=ExpressionCon(){if(res=="")
						return t1;
					return "( "+t1+" )"+res;
					}
}


String ExpressionCon () : {String res, t2;}
{
<AND>
t2=Expression(){res="&&("+t2+")";
				return res;
				}
|
<OR>
t2=Expression(){res="||("+t2+")";
				return res;
				}
|
{}{return "";}
}


String EQ():{Token t1;String s,t2;}
 {
 t2=E()
 s= EQSign() {return t2 +s;}

 }

String EQSign():{Token t1,t2;String s, s1;}
{
 <EQUAL>  
 s=AfterSign(){ return "==" +s;}
| 
 <NOTEQUAL>
 s=AfterSign(){ return "!=" +s;}
|
 <BIG>
 s1=orEqual()
 s=AfterSign(){ if (s1=="")
					return "> "+s;
				return ">="+s;
			  }
|
 <SMALL>
 s1=orEqual()
s=AfterSign(){ if (s1=="")
					return "<"+s;
				return "<="+s;
			 }
}

String orEqual () : {}
{
 <EQUAL> {return "=";}
|
 {} {return "";}
}

String AfterSign () : {Token t1;String s; }
{

 s=E() {return s;}
}

String If () : {String t1,t2,t3,res;}
{
<IF>
t1=Expression()
t2=expCon()
t3=expIfCon()
<OK>{res="if("+t1+") {"+t2+"\n}\n"+t3;
			 return res;
	}
}

 String expIfCon():{String t1,t2,t3,res=" ";}
 {
 <BUT>
  t1=Expression()
  t2=expCon(){res+="\nelse if("+t1+") {"+t2+"\n}\n";}
  t3=expIfCon(){res+=t3;return res;}
  |
  <ELSE>
  t2=expCon(){res+="else {\n"+t2+"\n}";}
  t3=expIfCon(){res+=t3;return res;}
  |
  {}{return res;}
 }





